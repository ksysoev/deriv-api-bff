// Code generated by mockery v2.45.1. DO NOT EDIT.

//go:build !compile

package router

import (
	core "github.com/ksysoev/deriv-api-bff/pkg/core"
	mock "github.com/stretchr/testify/mock"

	request "github.com/ksysoev/deriv-api-bff/pkg/core/request"
)

// MockDerivAPI is an autogenerated mock type for the DerivAPI type
type MockDerivAPI struct {
	mock.Mock
}

type MockDerivAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDerivAPI) EXPECT() *MockDerivAPI_Expecter {
	return &MockDerivAPI_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: _a0, _a1
func (_m *MockDerivAPI) Handle(_a0 *core.Conn, _a1 *request.Request) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Conn, *request.Request) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDerivAPI_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockDerivAPI_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 *core.Conn
//   - _a1 *request.Request
func (_e *MockDerivAPI_Expecter) Handle(_a0 interface{}, _a1 interface{}) *MockDerivAPI_Handle_Call {
	return &MockDerivAPI_Handle_Call{Call: _e.mock.On("Handle", _a0, _a1)}
}

func (_c *MockDerivAPI_Handle_Call) Run(run func(_a0 *core.Conn, _a1 *request.Request)) *MockDerivAPI_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Conn), args[1].(*request.Request))
	})
	return _c
}

func (_c *MockDerivAPI_Handle_Call) Return(_a0 error) *MockDerivAPI_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDerivAPI_Handle_Call) RunAndReturn(run func(*core.Conn, *request.Request) error) *MockDerivAPI_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDerivAPI creates a new instance of MockDerivAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDerivAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDerivAPI {
	mock := &MockDerivAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
