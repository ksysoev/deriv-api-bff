// Code generated by mockery v2.46.3. DO NOT EDIT.

//go:build !compile

package core

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRequest is an autogenerated mock type for the Request type
type MockRequest struct {
	mock.Mock
}

type MockRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequest) EXPECT() *MockRequest_Expecter {
	return &MockRequest_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with given fields:
func (_m *MockRequest) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockRequest_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockRequest_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Context() *MockRequest_Context_Call {
	return &MockRequest_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockRequest_Context_Call) Run(run func()) *MockRequest_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Context_Call) Return(_a0 context.Context) *MockRequest_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Context_Call) RunAndReturn(run func() context.Context) *MockRequest_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with given fields:
func (_m *MockRequest) Data() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockRequest_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockRequest_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Data() *MockRequest_Data_Call {
	return &MockRequest_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *MockRequest_Data_Call) Run(run func()) *MockRequest_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Data_Call) Return(_a0 []byte) *MockRequest_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Data_Call) RunAndReturn(run func() []byte) *MockRequest_Data_Call {
	_c.Call.Return(run)
	return _c
}

// RoutingKey provides a mock function with given fields:
func (_m *MockRequest) RoutingKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RoutingKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_RoutingKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoutingKey'
type MockRequest_RoutingKey_Call struct {
	*mock.Call
}

// RoutingKey is a helper method to define mock.On call
func (_e *MockRequest_Expecter) RoutingKey() *MockRequest_RoutingKey_Call {
	return &MockRequest_RoutingKey_Call{Call: _e.mock.On("RoutingKey")}
}

func (_c *MockRequest_RoutingKey_Call) Run(run func()) *MockRequest_RoutingKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_RoutingKey_Call) Return(_a0 string) *MockRequest_RoutingKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_RoutingKey_Call) RunAndReturn(run func() string) *MockRequest_RoutingKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequest creates a new instance of MockRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequest {
	mock := &MockRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
