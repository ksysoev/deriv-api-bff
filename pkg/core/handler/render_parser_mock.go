// Code generated by mockery v2.46.3. DO NOT EDIT.

//go:build !compile

package handler

import (
	context "context"

	core "github.com/ksysoev/deriv-api-bff/pkg/core"
	mock "github.com/stretchr/testify/mock"

	response "github.com/ksysoev/deriv-api-bff/pkg/core/response"
)

// MockRenderParser is an autogenerated mock type for the RenderParser type
type MockRenderParser struct {
	mock.Mock
}

type MockRenderParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRenderParser) EXPECT() *MockRenderParser_Expecter {
	return &MockRenderParser_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockRenderParser) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRenderParser_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockRenderParser_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockRenderParser_Expecter) Name() *MockRenderParser_Name_Call {
	return &MockRenderParser_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockRenderParser_Name_Call) Run(run func()) *MockRenderParser_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRenderParser_Name_Call) Return(_a0 string) *MockRenderParser_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRenderParser_Name_Call) RunAndReturn(run func() string) *MockRenderParser_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with given fields: data
func (_m *MockRenderParser) Parse(data []byte) (*response.Response, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *response.Response
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*response.Response, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) *response.Response); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.Response)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRenderParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockRenderParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - data []byte
func (_e *MockRenderParser_Expecter) Parse(data interface{}) *MockRenderParser_Parse_Call {
	return &MockRenderParser_Parse_Call{Call: _e.mock.On("Parse", data)}
}

func (_c *MockRenderParser_Parse_Call) Run(run func(data []byte)) *MockRenderParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockRenderParser_Parse_Call) Return(_a0 *response.Response, _a1 error) *MockRenderParser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRenderParser_Parse_Call) RunAndReturn(run func([]byte) (*response.Response, error)) *MockRenderParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: ctx, reqID, params, deps
func (_m *MockRenderParser) Render(ctx context.Context, reqID string, params []byte, deps map[string]any) (core.Request, error) {
	ret := _m.Called(ctx, reqID, params, deps)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 core.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]any) (core.Request, error)); ok {
		return rf(ctx, reqID, params, deps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]any) core.Request); ok {
		r0 = rf(ctx, reqID, params, deps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, map[string]any) error); ok {
		r1 = rf(ctx, reqID, params, deps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRenderParser_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockRenderParser_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - ctx context.Context
//   - reqID string
//   - params []byte
//   - deps map[string]any
func (_e *MockRenderParser_Expecter) Render(ctx interface{}, reqID interface{}, params interface{}, deps interface{}) *MockRenderParser_Render_Call {
	return &MockRenderParser_Render_Call{Call: _e.mock.On("Render", ctx, reqID, params, deps)}
}

func (_c *MockRenderParser_Render_Call) Run(run func(ctx context.Context, reqID string, params []byte, deps map[string]any)) *MockRenderParser_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(map[string]any))
	})
	return _c
}

func (_c *MockRenderParser_Render_Call) Return(_a0 core.Request, _a1 error) *MockRenderParser_Render_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRenderParser_Render_Call) RunAndReturn(run func(context.Context, string, []byte, map[string]any) (core.Request, error)) *MockRenderParser_Render_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRenderParser creates a new instance of MockRenderParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRenderParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRenderParser {
	mock := &MockRenderParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
