// Code generated by mockery v2.45.1. DO NOT EDIT.

//go:build !compile

package handler

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockRenderParser is an autogenerated mock type for the RenderParser type
type MockRenderParser struct {
	mock.Mock
}

type MockRenderParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRenderParser) EXPECT() *MockRenderParser_Expecter {
	return &MockRenderParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: data
func (_m *MockRenderParser) Parse(data []byte) (map[string]interface{}, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (map[string]interface{}, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) map[string]interface{}); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRenderParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockRenderParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - data []byte
func (_e *MockRenderParser_Expecter) Parse(data interface{}) *MockRenderParser_Parse_Call {
	return &MockRenderParser_Parse_Call{Call: _e.mock.On("Parse", data)}
}

func (_c *MockRenderParser_Parse_Call) Run(run func(data []byte)) *MockRenderParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockRenderParser_Parse_Call) Return(_a0 map[string]interface{}, _a1 error) *MockRenderParser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRenderParser_Parse_Call) RunAndReturn(run func([]byte) (map[string]interface{}, error)) *MockRenderParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: w, reqID, params
func (_m *MockRenderParser) Render(w io.Writer, reqID int64, params map[string]interface{}) error {
	ret := _m.Called(w, reqID, params)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, int64, map[string]interface{}) error); ok {
		r0 = rf(w, reqID, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRenderParser_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockRenderParser_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - w io.Writer
//   - reqID int64
//   - params map[string]interface{}
func (_e *MockRenderParser_Expecter) Render(w interface{}, reqID interface{}, params interface{}) *MockRenderParser_Render_Call {
	return &MockRenderParser_Render_Call{Call: _e.mock.On("Render", w, reqID, params)}
}

func (_c *MockRenderParser_Render_Call) Run(run func(w io.Writer, reqID int64, params map[string]interface{})) *MockRenderParser_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(int64), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockRenderParser_Render_Call) Return(_a0 error) *MockRenderParser_Render_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRenderParser_Render_Call) RunAndReturn(run func(io.Writer, int64, map[string]interface{}) error) *MockRenderParser_Render_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRenderParser creates a new instance of MockRenderParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRenderParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRenderParser {
	mock := &MockRenderParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
