// Code generated by mockery v2.46.3. DO NOT EDIT.

//go:build !compile

package config

import (
	context "context"

	handlerfactory "github.com/ksysoev/deriv-api-bff/pkg/core/handlerfactory"
	mock "github.com/stretchr/testify/mock"
)

// MockLocalSource is an autogenerated mock type for the LocalSource type
type MockLocalSource struct {
	mock.Mock
}

type MockLocalSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalSource) EXPECT() *MockLocalSource_Expecter {
	return &MockLocalSource_Expecter{mock: &_m.Mock}
}

// LoadConfig provides a mock function with given fields: ctx
func (_m *MockLocalSource) LoadConfig(ctx context.Context) ([]handlerfactory.Config, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 []handlerfactory.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]handlerfactory.Config, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []handlerfactory.Config); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]handlerfactory.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocalSource_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockLocalSource_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLocalSource_Expecter) LoadConfig(ctx interface{}) *MockLocalSource_LoadConfig_Call {
	return &MockLocalSource_LoadConfig_Call{Call: _e.mock.On("LoadConfig", ctx)}
}

func (_c *MockLocalSource_LoadConfig_Call) Run(run func(ctx context.Context)) *MockLocalSource_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLocalSource_LoadConfig_Call) Return(_a0 []handlerfactory.Config, _a1 error) *MockLocalSource_LoadConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocalSource_LoadConfig_Call) RunAndReturn(run func(context.Context) ([]handlerfactory.Config, error)) *MockLocalSource_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocalSource creates a new instance of MockLocalSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalSource {
	mock := &MockLocalSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
