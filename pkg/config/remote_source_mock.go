// Code generated by mockery v2.46.3. DO NOT EDIT.

//go:build !compile

package config

import (
	context "context"

	handlerfactory "github.com/ksysoev/deriv-api-bff/pkg/core/handlerfactory"
	mock "github.com/stretchr/testify/mock"
)

// MockRemoteSource is an autogenerated mock type for the RemoteSource type
type MockRemoteSource struct {
	mock.Mock
}

type MockRemoteSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteSource) EXPECT() *MockRemoteSource_Expecter {
	return &MockRemoteSource_Expecter{mock: &_m.Mock}
}

// LoadConfig provides a mock function with given fields: ctx
func (_m *MockRemoteSource) LoadConfig(ctx context.Context) ([]handlerfactory.Config, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 []handlerfactory.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]handlerfactory.Config, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []handlerfactory.Config); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]handlerfactory.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteSource_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockRemoteSource_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRemoteSource_Expecter) LoadConfig(ctx interface{}) *MockRemoteSource_LoadConfig_Call {
	return &MockRemoteSource_LoadConfig_Call{Call: _e.mock.On("LoadConfig", ctx)}
}

func (_c *MockRemoteSource_LoadConfig_Call) Run(run func(ctx context.Context)) *MockRemoteSource_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRemoteSource_LoadConfig_Call) Return(_a0 []handlerfactory.Config, _a1 error) *MockRemoteSource_LoadConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteSource_LoadConfig_Call) RunAndReturn(run func(context.Context) ([]handlerfactory.Config, error)) *MockRemoteSource_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutConfig provides a mock function with given fields: ctx, cfg
func (_m *MockRemoteSource) PutConfig(ctx context.Context, cfg []handlerfactory.Config) error {
	ret := _m.Called(ctx, cfg)

	if len(ret) == 0 {
		panic("no return value specified for PutConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []handlerfactory.Config) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteSource_PutConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutConfig'
type MockRemoteSource_PutConfig_Call struct {
	*mock.Call
}

// PutConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - cfg []handlerfactory.Config
func (_e *MockRemoteSource_Expecter) PutConfig(ctx interface{}, cfg interface{}) *MockRemoteSource_PutConfig_Call {
	return &MockRemoteSource_PutConfig_Call{Call: _e.mock.On("PutConfig", ctx, cfg)}
}

func (_c *MockRemoteSource_PutConfig_Call) Run(run func(ctx context.Context, cfg []handlerfactory.Config)) *MockRemoteSource_PutConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]handlerfactory.Config))
	})
	return _c
}

func (_c *MockRemoteSource_PutConfig_Call) Return(_a0 error) *MockRemoteSource_PutConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteSource_PutConfig_Call) RunAndReturn(run func(context.Context, []handlerfactory.Config) error) *MockRemoteSource_PutConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteSource creates a new instance of MockRemoteSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteSource {
	mock := &MockRemoteSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
