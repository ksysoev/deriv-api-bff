// Code generated by mockery v2.45.1. DO NOT EDIT.

//go:build !compile

package repo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEtcd is an autogenerated mock type for the Etcd type
type MockEtcd struct {
	mock.Mock
}

type MockEtcd_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEtcd) EXPECT() *MockEtcd_Expecter {
	return &MockEtcd_Expecter{mock: &_m.Mock}
}

// Put provides a mock function with given fields: ctx, key, value
func (_m *MockEtcd) Put(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEtcd_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockEtcd_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *MockEtcd_Expecter) Put(ctx interface{}, key interface{}, value interface{}) *MockEtcd_Put_Call {
	return &MockEtcd_Put_Call{Call: _e.mock.On("Put", ctx, key, value)}
}

func (_c *MockEtcd_Put_Call) Run(run func(ctx context.Context, key string, value string)) *MockEtcd_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEtcd_Put_Call) Return(_a0 error) *MockEtcd_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEtcd_Put_Call) RunAndReturn(run func(context.Context, string, string) error) *MockEtcd_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, key
func (_m *MockEtcd) Watch(ctx context.Context, key string) {
	_m.Called(ctx, key)
}

// MockEtcd_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockEtcd_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockEtcd_Expecter) Watch(ctx interface{}, key interface{}) *MockEtcd_Watch_Call {
	return &MockEtcd_Watch_Call{Call: _e.mock.On("Watch", ctx, key)}
}

func (_c *MockEtcd_Watch_Call) Run(run func(ctx context.Context, key string)) *MockEtcd_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEtcd_Watch_Call) Return() *MockEtcd_Watch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEtcd_Watch_Call) RunAndReturn(run func(context.Context, string)) *MockEtcd_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEtcd creates a new instance of MockEtcd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEtcd(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEtcd {
	mock := &MockEtcd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
