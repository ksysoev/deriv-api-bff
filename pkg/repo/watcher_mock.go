// Code generated by mockery v2.45.1. DO NOT EDIT.

//go:build !compile

package repo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	"go.etcd.io/etcd/clientv3"
)

// MockWatcher is an autogenerated mock type for the Watcher type
type MockWatcher struct {
	mock.Mock
}

type MockWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatcher) EXPECT() *MockWatcher_Expecter {
	return &MockWatcher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockWatcher) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatcher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWatcher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWatcher_Expecter) Close() *MockWatcher_Close_Call {
	return &MockWatcher_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWatcher_Close_Call) Run(run func()) *MockWatcher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWatcher_Close_Call) Return(_a0 error) *MockWatcher_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcher_Close_Call) RunAndReturn(run func() error) *MockWatcher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// RequestProgress provides a mock function with given fields: ctx
func (_m *MockWatcher) RequestProgress(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RequestProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatcher_RequestProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestProgress'
type MockWatcher_RequestProgress_Call struct {
	*mock.Call
}

// RequestProgress is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWatcher_Expecter) RequestProgress(ctx interface{}) *MockWatcher_RequestProgress_Call {
	return &MockWatcher_RequestProgress_Call{Call: _e.mock.On("RequestProgress", ctx)}
}

func (_c *MockWatcher_RequestProgress_Call) Run(run func(ctx context.Context)) *MockWatcher_RequestProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWatcher_RequestProgress_Call) Return(_a0 error) *MockWatcher_RequestProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcher_RequestProgress_Call) RunAndReturn(run func(context.Context) error) *MockWatcher_RequestProgress_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, key, opts
func (_m *MockWatcher) Watch(ctx context.Context, key string, opts ...clientv3.OpOption) clientv3.WatchChan {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 clientv3.WatchChan
	if rf, ok := ret.Get(0).(func(context.Context, string, ...clientv3.OpOption) clientv3.WatchChan); ok {
		r0 = rf(ctx, key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientv3.WatchChan)
		}
	}

	return r0
}

// MockWatcher_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockWatcher_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - opts ...OpOption
func (_e *MockWatcher_Expecter) Watch(ctx interface{}, key interface{}, opts ...interface{}) *MockWatcher_Watch_Call {
	return &MockWatcher_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, key}, opts...)...)}
}

func (_c *MockWatcher_Watch_Call) Run(run func(ctx context.Context, key string, opts ...clientv3.OpOption)) *MockWatcher_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]clientv3.OpOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(clientv3.OpOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockWatcher_Watch_Call) Return(_a0 clientv3.WatchChan) *MockWatcher_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcher_Watch_Call) RunAndReturn(run func(context.Context, string, ...clientv3.OpOption) clientv3.WatchChan) *MockWatcher_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWatcher creates a new instance of MockWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcher {
	mock := &MockWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
